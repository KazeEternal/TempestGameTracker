// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace com.kylepeplow.gamestracker.data
{

using global::System;
using global::FlatBuffers;

public struct Game : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Game GetRootAsGame(ByteBuffer _bb) { return GetRootAsGame(_bb, new Game()); }
  public static Game GetRootAsGame(ByteBuffer _bb, Game obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Game __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Platform? Systems(int j) { int o = __p.__offset(6); return o != 0 ? (Platform?)(new Platform()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SystemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Finished { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Complete { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Game> CreateGame(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset systemsOffset = default(VectorOffset),
      bool finished = false,
      bool complete = false) {
    builder.StartObject(4);
    Game.AddSystems(builder, systemsOffset);
    Game.AddName(builder, nameOffset);
    Game.AddComplete(builder, complete);
    Game.AddFinished(builder, finished);
    return Game.EndGame(builder);
  }

  public static void StartGame(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddSystems(FlatBufferBuilder builder, VectorOffset systemsOffset) { builder.AddOffset(1, systemsOffset.Value, 0); }
  public static VectorOffset CreateSystemsVector(FlatBufferBuilder builder, Offset<Platform>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSystemsVectorBlock(FlatBufferBuilder builder, Offset<Platform>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSystemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFinished(FlatBufferBuilder builder, bool finished) { builder.AddBool(2, finished, false); }
  public static void AddComplete(FlatBufferBuilder builder, bool complete) { builder.AddBool(3, complete, false); }
  public static Offset<Game> EndGame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Game>(o);
  }
};


}
